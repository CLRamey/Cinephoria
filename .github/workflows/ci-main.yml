
# This workflow will be triggered on every pull to the main branch.
# It will run the build and test commands to ensure that the code is working correctly.
# It will launch the ci-deploy.yml to deploy the application if all tests pass on this workflow.

name: CI  Main Branch

permissions:
  contents: read
  actions: write

on:
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened]

env: 
  NODE_ENV: ${{ secrets.NODE_ENV }}
  #SQL
  MARIADB_DATABASE: ${{ secrets.MARIADB_DATABASE }}
  MARIADB_USER: ${{ secrets.MARIADB_USER }}
  MARIADB_PASSWORD: ${{ secrets.MARIADB_PASSWORD }}
  MARIADB_ROOT_PASSWORD: ${{ secrets.MARIADB_ROOT_PASSWORD }}
  MARIADB_HOST: ${{ secrets.MARIADB_HOST }}
  MARIADB_PORT: ${{ secrets.MARIADB_PORT }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  DB_DIALECT: ${{ secrets.DB_DIALECT }}
  # NoSQL
  MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
  MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
  MONGO_INITDB_DATABASE: ${{ secrets.MONGO_INITDB_DATABASE }}
  MONGO_USERNAME: ${{ secrets.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
  MONGO_HOST: ${{ secrets.MONGO_HOST }}
  MONGO_PORT: ${{ secrets.MONGO_PORT }}
  MONGO_URI: ${{ secrets.MONGO_URI }}
  # Mail Service
  SMTP_HOST: ${{ secrets.SMTP_HOST }}
  SMTP_PORT: ${{ secrets.SMTP_PORT }}
  SMTP_SECURE: ${{ secrets.SMTP_SECURE }}
  SMTP_USER: ${{ secrets.SMTP_USER }}
  SMTP_PASS: ${{ secrets.SMTP_PASS }}
  SMTP_FROM: ${{ secrets.SMTP_FROM }}
  # OTHER
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN }}
  CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
  COOKIE_SECRET: ${{ secrets.COOKIE_SECRET }}
  BASE_URL: ${{ secrets.BASE_URL }}
  API_URL: ${{ secrets.API_URL }}
  PORT: ${{ secrets.PORT }}
  # Test users
  TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
  CLIENT_TEST_USER_EMAIL: ${{ secrets.CLIENT_TEST_USER_EMAIL }}
  EMPLOYEE_TEST_USER_EMAIL: ${{ secrets.EMPLOYEE_TEST_USER_EMAIL }}
  ADMIN_TEST_USER_EMAIL: ${{ secrets.ADMIN_TEST_USER_EMAIL }}
  # Secure database management user
  SUPER_ADMIN: ${{ secrets.SUPER_ADMIN }}
  SUPER_ADMIN_PASSWORD: ${{ secrets.SUPER_ADMIN_PASSWORD }}
  # SSL
  DB_SSL: ${{ secrets.DB_SSL }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    environment: test
    strategy:
      matrix:
        node-version: [22.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'

    - name: Install dependencies
      run: npm ci
      working-directory: ./

    - name: Install backend dependencies
      run: npm ci
      working-directory: ./backend

    - name: Audit frontend dependencies
      run: npm audit --omit=dev
      working-directory: ./

    - name: Audit backend dependencies
      run: npm audit --omit=dev
      working-directory: ./backend

    - name: Lint code
      run: npm run lint
      working-directory: ./

    - name: Start Docker containers (production testing)
      run: npm run docker:test
      working-directory: ./

    - name: Launching the docker cinephoria test app
      run: |
        echo "Launching the cinephoria test app..."  
        docker compose -f docker-compose-test.yml exec -T cinephoria-test nohup npm run dev:test > /dev/null 2>&1 &

    - name: Wait for cinephoria app to be ready for testing
      run: |
        echo "Waiting for the app to be ready..."
        sleep 45

    - name: Initialize test users
      run: |
        echo "Seeding test users..."
        docker compose -f docker-compose-test.yml exec -T cinephoria-test npm run backend:seeder

    - name: Wait for cinephoria test app to be ready
      run: |
        echo "Waiting for the app to be ready..."
        sleep 45

    - name: Run All Tests
      run: |
        echo "Running all tests (unit, integration and functional)..."
        docker compose -f docker-compose-test.yml exec -T cinephoria-test npm run test:all

    - name: Run E2E cypress Tests
      run: |
        echo "Running e2e cypress tests..."
        docker compose -f docker-compose-test.yml exec -T cinephoria-test npm run test:e2e:run:ci

    - name: Removing test users
      run: |
        echo "Removing test users..."
        docker compose -f docker-compose-test.yml exec -T cinephoria-test npm run backend:seeder:remove

    - name: Stop Docker containers
      if: always()
      run: npm run docker:test:down
    
    - name: Trigger CI Pre-Deployment workflow
      if: ${{ success() }}
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          console.log("All tests past! Triggering CI Pre-deploy workflow...");
          await github.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: "ci-predeploy.yml",
            ref: "main",
            inputs: {
              env: "production"
            }
          })