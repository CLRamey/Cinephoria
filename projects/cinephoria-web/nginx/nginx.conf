## ---- Nginx production configuration for Cinephoria web ----
## Docker nginx has already a lot of preset configurations including nginx as user,
## this file takes into consideration the docker default settings and best practices

## Rate limiting help protect against DDoS and brute force attacks, can be modified for scalability (adjust accordingly)
limit_req_zone $binary_remote_addr zone=perip:10m rate=20r/s; 
## per-IP : 10MB shared memory, limit 20 requests/sec per IP
limit_req_zone $server_name zone=perserver:10m rate=75r/s; 
## per server:  10MB shared memory, limit 75 req/sec 

## Additional basic performance tuning
tcp_nopush on;                           # optimize sending of large files
tcp_nodelay on;                          # send small packets immediately
types_hash_max_size 512;                 # MIME types hash table size (512, 1024 or 2048)
server_tokens off;                       # hide nginx version in error pages/headers

## Client body size limit
client_max_body_size 2M;                # max upload size (adjust if you need larger uploads)

## Timeouts for proxy connections
proxy_connect_timeout 65s;               # how long to wait to establish connection to upstream
proxy_send_timeout 65s;                  # timeout for transmitting request to upstream
proxy_read_timeout 65s;                  # timeout for reading response from upstream
proxy_buffer_size 16k;
proxy_buffers 4 32k;
proxy_busy_buffers_size 64k;
proxy_temp_file_write_size 64k;

## map for websocket connections
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}
## This sets $connection_upgrade to "upgrade" when client requests websocket upgrade,
## otherwise "close". Used later as proxy_set_header Connection $connection_upgrade;

## Upstreams
## Note: these must point to the container internal ports
upstream frontend {
 server cinephoria-front:80;
}
upstream backend {
    server cinephoria-back:3000; 
}

## --- PRODUCTION HTTPS ----
## Adjust accordingly for your production environment and uncomment out to enable for production
# ----
server {
    listen 80;
    listen [::]:80;
    server_name exampledomain.dev www.exampledomain.dev;            # REPLACE with your domain(s)
    return 301 https://$host$request_uri;           # Ensures all HTTP requests are redirected to HTTPS
}

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name exampledomain.dev www.exampledomain.dev;            # REPLACE with your domain(s)

    ssl_certificate /etc/ssl/certs/app.crt;         # point to mounted certificate
    ssl_certificate_key /etc/ssl/private/app.key;   # point to mounted key

    ssl_session_timeout 60m;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;

    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';

    root /usr/share/nginx/html;
    index index.html;
    charset utf-8;

    limit_req zone=perip burst=30;
    limit_req zone=perserver burst=100;

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Content-Security-Policy "
        default-src 'self';
        script-src 'self' 'unsafe-inline' 'unsafe-eval';
        style-src 'self' 'unsafe-inline' https://fonts.googleapis.com;
        font-src 'self' https://fonts.gstatic.com data:;
        img-src 'self' data:;
        connect-src 'self' https://exampledomain.dev/api;
    " always;

    # Limit search engine exposure for the project
    add_header X-Robots-Tag "noindex, nofollow" always;

    location / {
        try_files $uri $uri/ /index.html;
    }

    location /api/ {
        proxy_pass http://backend/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 90s;
        proxy_buffering off;
    }

    # Custom error pages (optional)
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
         root /usr/share/nginx/html;        # serve custom 50x page from nginx html
         internal;                          # cannot be requested directly
    }

    # Custom 404 page
    error_page 404 /404.html;
    location = /404.html {
         root /usr/share/nginx/html;        # serve custom 404 page from nginx html
         internal;                          # cannot be requested directly
    }

    # Deny access to hidden files
    location ~ /\.(?!well-known) {
        deny all;
        return 404;
    }

    # gzip compression for better performance
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_min_length 256;
    gzip_proxied any;
    gzip_vary on;
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";
    gzip_comp_level 5;
} # end HTTPS server