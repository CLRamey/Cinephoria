## ---- Nginx production configuration for Cinephoria web ----
## Docker nginx has already a lot of preset configurations including nginx as user,
## this file takes into consideration the docker default settings and best practices
## Production HTTPS section is commented out for now

## Some of the default configurations already set in docker nginx : 
## - user nginx;
## - worker_processes auto;
## - error_log /var/log/nginx/error.log;
## - pid /var/run/nginx.pid;
## - include /etc/nginx/mime.types;
## - default_type application/octet-stream;
## - sendfile on;
## - keepalive_timeout 65;

## Rate limiting help protect against DDoS and brute force attacks, can be modified for scalability (adjust accordingly)
limit_req_zone $binary_remote_addr zone=perip:10m rate=20r/s; 
## per-IP : 10MB shared memory, limit 20 requests/sec per IP
limit_req_zone $server_name zone=perserver:10m rate=75r/s; 
## per server:  10MB shared memory, limit 75 req/sec 

## Additional basic performance tuning
tcp_nopush on;                           # optimize sending of large files
tcp_nodelay on;                          # send small packets immediately
types_hash_max_size 512;                 # MIME types hash table size (512, 1024 or 2048)
server_tokens off;                       # hide nginx version in error pages/headers

## Client body size limit
client_max_body_size 2M;                # max upload size (adjust if you need larger uploads)

## Timeouts for proxy connections
proxy_connect_timeout 65s;               # how long to wait to establish connection to upstream
proxy_send_timeout 65s;                  # timeout for transmitting request to upstream
proxy_read_timeout 65s;                  # timeout for reading response from upstream
proxy_buffer_size 16k;
proxy_buffers 4 32k;
proxy_busy_buffers_size 64k;
proxy_temp_file_write_size 64k;

## map for websocket connections
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}
## This sets $connection_upgrade to "upgrade" when client requests websocket upgrade,
## otherwise "close". Used later as proxy_set_header Connection $connection_upgrade;

## Upstreams
## Note: these must point to the container internal ports
upstream frontend {
 server cinephoria-front:80;
}
upstream backend {
    server cinephoria-back:3000; 
}

## ---- LOCAL HTTP SERVER (works without domain or TLS) ----
## Unhashed for local server use || Ensure to hash when ready to use the PRODUCTION HTTPS below)
# ----
server {
    listen 80 default_server;             # listen on HTTP port 80 and be default server for requests
    listen [::]:80 default_server;        # listen on IPv6 HTTP port 80
    server_name localhost;                # match requests for "localhost" (use when testing locally)

    root /usr/share/nginx/html;           # fallback root (used for error pages or static files)
    index index.html;                     # default index file
    charset utf-8;                        # default charset

    limit_req zone=perip burst=30;
    limit_req zone=perserver burst=100;

   # ---- Frontend (Angular SPA) ----
    location / {
        try_files $uri $uri/ /index.html;
    }

    # ---- API proxy: route /api/ to backend ----
    location /api/ {
        proxy_pass http://backend/;                                  # forward to backend upstream
        proxy_http_version 1.1;                                      # use HTTP/1.1 for websocket support
        proxy_set_header Host $host;                                 # preserve original Host header
        proxy_set_header X-Real-IP $remote_addr;                     # client IP
        proxy_set_header X-Forwarded-For $remote_addr;               # client IP for first proxy only
        proxy_set_header X-Forwarded-Proto $scheme;                  # original scheme (http/https)
        proxy_set_header Upgrade $http_upgrade;                      # websocket upgrade header
        proxy_set_header Connection $connection_upgrade;             # connection header set via map above
        proxy_cache_bypass $http_upgrade;                            # avoid caching websocket upgrades
        proxy_read_timeout 90s;                                      # allow long-lived backend replies
        proxy_buffering off;                                         # recommended for websockets / streaming
    }

    # Security headers (to partially test locally, adjust accordingly)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Content-Security-Policy "
        default-src 'self';
        script-src 'self' 'unsafe-inline' 'unsafe-eval';
        style-src 'self' 'unsafe-inline' https://fonts.googleapis.com;
        font-src 'self' https://fonts.gstatic.com data:;
        img-src 'self' data:;
        connect-src 'self' ws://localhost:3000 http: https:;
    " always;
    # CSP needs to be modified for production with correct https domain address

    # Custom error pages (optional)
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;        # serve custom 50x page from nginx html
        internal;                          # cannot be requested directly
    }
    
    # Custom 404 page
    error_page 404 /404.html;
    location = /404.html {
         root /usr/share/nginx/html;        # serve custom 404 page from nginx html
         internal;                          # cannot be requested directly
    }

    # deny access to hidden files
    location ~ /\.(?!well-known) {
        deny all;
        return 404;
    }
    
    # gzip compression for better performance
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_min_length 256;
    gzip_proxied any;
    gzip_vary on;
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";
    gzip_comp_level 5;
} # end local HTTP server
