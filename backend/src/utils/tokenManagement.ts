import jwt, { Secret, JwtPayload } from 'jsonwebtoken';
import { Role } from '../validators/userValidator';
import { logerror } from './logger';
import { Response } from 'express';

// Ensure JWT_SECRET exists
if (!process.env.JWT_SECRET) {
  throw new Error('JWT_SECRET is not defined');
}

const JWT_SECRET: Secret | undefined = process.env.JWT_SECRET as Secret;

// Interface for the token payload structure.
export interface TokenPayload {
  userId: number;
  userRole: Role;
}

// Extending the TokenPayload interface to include the fields auto-generated by the JWT library for verification.
export interface VerificationTokenPayload extends TokenPayload, JwtPayload {
  iat: number; // Issued at time
  exp: number; // Expiration time
}

// Function to create a JWT token with a payload and expiration time.
export const createToken = (payload: TokenPayload): string => {
  const token = jwt.sign(payload, JWT_SECRET, {
    expiresIn: '1h', // Token default expiration time
    algorithm: 'HS256', // Algorithm used for signing the token
  });
  return token;
};

// Function to generate an access token for a user.
export const generateAccessToken = (userId: number, userRole: Role): string => {
  return createToken({ userId, userRole });
};

// Function to verify the JWT token and return the decoded payload.
export const verifyToken = (token: string): VerificationTokenPayload => {
  try {
    const decoded = jwt.verify(token, JWT_SECRET) as VerificationTokenPayload;
    return decoded;
  } catch (error) {
    logerror('Verification failed:', error);
    throw new Error('Invalid');
  }
};

// COOKIE OPTIONS
export const cookieOptions = {
  httpOnly: true,
  secure: process.env.NODE_ENV === 'production',
  sameSite: 'lax' as const, // Lax is a good default for CSRF protection, or strict
  maxAge: 1000 * 60 * 60, // 1 hour
  signed: !!process.env.COOKIE_SECRET,
  path: '/',
};

// Attach JWT access token as HttpOnly cookie
export const attachAccessToken = (res: Response, token: string) => {
  res.cookie('access_token', token, cookieOptions);
};

// Clear the JWT access token cookie
export const clearAccessToken = (res: Response) => {
  res.clearCookie('access_token', {
    httpOnly: true,
    secure: process.env.NODE_ENV === 'production',
    sameSite: 'lax' as const, // Lax is a good default for CSRF protection, or strict
    maxAge: 0,
    signed: !!process.env.COOKIE_SECRET,
  });
};
