import jwt, { Secret, JwtPayload } from 'jsonwebtoken';

const JWT_SECRET: Secret | undefined = process.env.JWT_SECRET as Secret;

// Ensure JWT_SECRET exists
if (!process.env.JWT_SECRET) {
  throw new Error('JWT_SECRET is not defined');
}

// Interface for the token payload structure.
export interface TokenPayload {
  userId: number;
  userRole?: string;
  isVerified?: boolean;
}

// Function to create a JWT token with a payload and expiration time.
export const createToken = (payload: TokenPayload): string => {
  const token = jwt.sign(payload, JWT_SECRET, {
    expiresIn: '1h', // Token default expiration time
    algorithm: 'HS256', // Algorithm used for signing the token
  });
  return token;
};

// Extending the TokenPayload interface to include the fields auto-generated by the JWT library for verification.
export interface VerificationTokenPayload extends TokenPayload, JwtPayload {
  iat: number; // Issued at time
  exp: number; // Expiration time
}

// Function to verify the JWT token and return the decoded payload.
export const verifyToken = (token: string): VerificationTokenPayload => {
  try {
    const decoded = jwt.verify(token, JWT_SECRET) as VerificationTokenPayload;
    return decoded;
  } catch (error) {
    console.error('Verification failed:', error);
    throw new Error('Invalid');
  }
};
